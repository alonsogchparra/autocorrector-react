{"version":3,"sources":["components/AddWord.js","components/Autocorrector.js","hooks/useCheckWord.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["AddWord","handleNewCorrections","handlerInputMisspelledChange","misspelled","setRightWord","rightWord","keyExist","handlerCancelButton","className","onSubmit","htmlFor","type","autoComplete","name","onChange","value","required","e","target","onClick","CORRECTIONS","realy","wierd","Autocorrector","useState","Object","keys","map","word","key","correction","newCorrections","setNewCorrections","text","setText","checkTextArea","checkWord","auxWords","keyCode","split","i","length","j","toLowerCase","join","useCheckWord","setMisspelled","addNewWord","setAddNewWord","setKeyExist","preventDefault","onKeyDown","id","JSON","stringify","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.995f2291.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const AddWord = ({\n  handleNewCorrections,\n  handlerInputMisspelledChange,\n  misspelled,\n  setRightWord,\n  rightWord,\n  keyExist,\n  handlerCancelButton,\n}) => {\n  return (\n    <>\n      <form\n        className=\"mb-5 mt-3 animate__animated animate__fadeIn\"\n        onSubmit={handleNewCorrections}\n      >\n        <label htmlFor=\"key\" className=\"form-label\">\n          Misspelled word\n        </label>\n        <input\n          type=\"text\"\n          className=\"form-control misspelled\"\n          autoComplete=\"off\"\n          name=\"key\"\n          onChange={handlerInputMisspelledChange}\n          value={misspelled}\n          required\n        />\n        <label htmlFor=\"key\" className=\"form-label\">\n          Right word\n        </label>\n        <input\n          type=\"text\"\n          className=\"form-control mb-1 right-word\"\n          autoComplete=\"off\"\n          name=\"correction\"\n          onChange={(e) => setRightWord(e.target.value)}\n          value={rightWord}\n          required\n        />\n\n        <div>\n          {keyExist && (\n            <p className=\"form-text text-center text-danger mt-3 already_exists\">\n              The misspelled word already exists\n            </p>\n          )}\n        </div>\n\n        <div className=\"d-flex mt-4\">\n          <button className=\"btn btn-primary form-control me-2 btn_add\">Add</button>\n          <button\n            className=\"btn btn-danger form-control btn_cancel\"\n            onClick={handlerCancelButton}\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useCheckWord } from \"../hooks/useCheckWord\";\nimport { AddWord } from \"./AddWord\";\nimport \"./styles.css\";\n\nconst CORRECTIONS = {\n  realy: \"really\",\n  wierd: \"weird\",\n};\n\nexport const Autocorrector = () => {\n  const [newCorrections, setNewCorrections] = useState(\n    Object.keys(CORRECTIONS).map((word) => ({\n      key: word,\n      correction: CORRECTIONS[word],\n    }))\n  );\n\n  const { text, checkTextArea, checkWord } = useCheckWord(newCorrections);\n  const [misspelled, setMisspelled] = useState(\"\");\n  const [rightWord, setRightWord] = useState(\"\");\n  const [addNewWord, setAddNewWord] = useState(false);\n  const [keyExist, setKeyExist] = useState(false);\n\n  const handlerInputMisspelledChange = (e) => {\n    setKeyExist(false);\n    setMisspelled(e.target.value);\n  };\n\n  const handleNewCorrections = (e) => {\n    e.preventDefault();\n\n    for (let i = 0; i < newCorrections.length; i++) {\n      if (newCorrections[i].key.toLowerCase() === misspelled.toLowerCase()) {\n        setKeyExist(true);\n        setMisspelled(\"\");\n        setRightWord(\"\");\n        return;\n      }\n    }\n\n    if (!keyExist) {\n      setNewCorrections([\n        ...newCorrections,\n        {\n          key: misspelled,\n          correction: rightWord,\n        },\n      ]);\n    }\n\n    setMisspelled(\"\");\n    setRightWord(\"\");\n    setAddNewWord(!addNewWord);\n  };\n\n  const handlerCancelButton = () => {\n    setKeyExist(false);\n    setMisspelled(\"\");\n    setRightWord(\"\");\n    setAddNewWord(!addNewWord);\n  };\n\n  return (\n    <div className=\"container animate__animated animate__fadeInUp animate__slow\">\n      {!addNewWord && (\n        <div className=\"col-12 animate__animated animate__fadeIn mb-5 add-word-corrector\">\n          <h3 className=\"text-center\">\n            You can add new words to the corrector\n          </h3>\n\n          <div className=\"text-center col-8 offset-2 col-md-6 offset-md-3\">\n            <button\n              className=\"btn btn-primary form-control\"\n              onClick={() => setAddNewWord(!addNewWord)}\n            >\n              Add new words\n            </button>\n          </div>\n        </div>\n      )}\n\n      {addNewWord && (\n        <AddWord\n          handleNewCorrections={handleNewCorrections}\n          handlerCancelButton={handlerCancelButton}\n          handlerInputMisspelledChange={handlerInputMisspelledChange}\n          misspelled={misspelled}\n          setRightWord={setRightWord}\n          rightWord={rightWord}\n          keyExist={keyExist}\n        />\n      )}\n\n      <hr />\n\n      <div className=\"row mt-3\">\n        <div className=\"col-12 col-md-6 px-4 line-divided\">\n          <h4 className=\"text-center mb-4\">\n            Text Area (Check the Autocorrection)\n          </h4>\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={checkTextArea}\n            onKeyDown={checkWord}\n            name=\"\"\n            id=\"\"\n          ></textarea>\n        </div>\n\n        <div className=\"col-12 col-md-6 px-4 mt-4 mt-md-0\">\n          <h4 className=\"text-center mb-4\">Correction's List</h4>\n          <pre>{JSON.stringify(newCorrections, null, 2)}</pre>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useState } from \"react\";\n\nexport const useCheckWord = (newCorrections = []) => {\n  const [text, setText] = useState(\"\");\n\n  const checkTextArea = (e) => {\n    setText(e.target.value);\n  };\n\n  const checkWord = (e) => {\n    let auxWords = null;\n\n    if (e.keyCode === 32) {\n      auxWords = e.target.value.split(\" \");\n\n      for (let i = 0; i < newCorrections.length; i++) {\n        for (let j = 0; j < auxWords.length; j++) {\n          if (\n            auxWords[j].toLowerCase() === newCorrections[i]?.key.toLowerCase()\n          ) {\n            auxWords[j] = newCorrections[i].correction;\n          }\n        }\n      }\n      setText(auxWords.join(\" \"));\n    }\n  };\n\n  return { text, checkTextArea, checkWord };\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import \"./App.css\";\nimport { Autocorrector } from \"./components/Autocorrector\";\nimport logo from \"./logo.svg\";\n\nexport const App = () => {\n  return (\n    <div className=\"\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App App-logo\" alt=\"logo\" />\n        <h1>Autocorrector (Tiny)</h1>\n        <Autocorrector />\n      </header>\n    </div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import \"../node_modules/animate.css\";\nimport \"animate.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}